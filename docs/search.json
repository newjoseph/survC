[{"path":"https://newjoseph.github.io/survC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Minhyuk Kim. Author, maintainer.","code":""},{"path":"https://newjoseph.github.io/survC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kim M (2025). survC: Survival Model Validation Utilities. R package version 0.1.0.","code":"@Manual{,   title = {survC: Survival Model Validation Utilities},   author = {Minhyuk Kim},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":"https://newjoseph.github.io/survC/index.html","id":"survc","dir":"","previous_headings":"","what":"Survival Model Validation Utilities","title":"Survival Model Validation Utilities","text":"survC provides lightweight utilities validating survival models. package focuses Cox regression workflows, wrapping common validation tasks extracting linear predictors, computing Harrell’s concordance, summarising time-dependent ROC curves. also includes helpers preparing cohort data producing slide-based validation reports.","code":""},{"path":"https://newjoseph.github.io/survC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Survival Model Validation Utilities","text":"Install development version survC GitHub : examples require survival, timeROC, officer, rvg packages. listed Imports pulled automatically survC installed.","code":"# install.packages(\"pak\") pak::pak(\"newjoseph/survC\")"},{"path":"https://newjoseph.github.io/survC/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key features","title":"Survival Model Validation Utilities","text":"Convert fitted coxph models linear predictors risk scores calc_risk_score() downstream metrics. Summarise time-dependent ROC curves across custom horizons via tdroc_calc() inspect underlying timeROC object. Compute Harrell’s C-index (95% confidence interval) training validation cohorts using cindex_calc(). Generate multi-slide PowerPoint reports compare training validation ROC curves designated time points validation_report(), specifying columns contain survival times event indicators. Prepare Excel-based cohort extracts downstream modelling prepare_adpkd_dataset().","code":""},{"path":"https://newjoseph.github.io/survC/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Survival Model Validation Utilities","text":"example demonstrates typical validation workflow using survival::lung dataset. returned AUC table mirrors timeROC output carries full ROC object roc_obj attribute plotting inspection:","code":"library(survC) library(survival)  set.seed(2024) lung <- survival::lung lung <- lung[complete.cases(lung[, c(\"time\", \"status\", \"age\", \"ph.ecog\")]), ]  # Split into training and validation cohorts split_ids <- sample(seq_len(nrow(lung))) train_idx <- split_ids[1:110] val_idx <- split_ids[111:200]  train_df <- lung[train_idx, ] val_df <- lung[val_idx, ]  # Fit a simple Cox model on the training data cox_fit <- survival::coxph(   survival::Surv(time, status == 2) ~ age + ph.ecog,   data = train_df,   x = TRUE )  # 1. Linear predictor / risk scores train_lp <- calc_risk_score(cox_fit) val_lp <- calc_risk_score(cox_fit, data = val_df)  # 2. Harrell's concordance on the validation cohort c_index_val <- cindex_calc(cox_fit, newdata = val_df) c_index_val #> Cindex  Lower  Upper  #>  0.561  0.481  0.641  # 3. Time-dependent ROC summary at selected horizons horizons <- c(200, 400) roc_tbl <- tdroc_calc(   time = val_df$time,   status = as.integer(val_df$status == 2),   marker = val_lp,   times = horizons ) roc_tbl #>       time       AUC #> t=200  200 0.5981693 #> t=400  400 0.5054571 roc_obj <- attr(roc_tbl, \"roc_obj\") list(   AUC = roc_obj$AUC,   times = roc_obj$times ) #> $AUC #>     t=200     t=400  #> 0.5981693 0.5054571  #>  #> $times #> [1] 200 400"},{"path":"https://newjoseph.github.io/survC/index.html","id":"validation-report-powerpoint","dir":"","previous_headings":"Quick start","what":"Validation report (PowerPoint)","title":"Survival Model Validation Utilities","text":"Use validation_report() export one slide per horizon training validation ROC curves side--side. Pass column names hold follow-times event indicators via time_col status_col. function relies officer rvg plots remain editable.","code":"validation_report(   train_data = transform(train_df, time = time, status = as.integer(status == 2)),   val_data = transform(val_df, time = time, status = as.integer(status == 2)),   model = cox_fit,   time_col = \"time\",   status_col = \"status\",   times = horizons,   time_unit = \"days\",   output = \"validation_report.pptx\" )"},{"path":"https://newjoseph.github.io/survC/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Survival Model Validation Utilities","text":"Re-knit README editing : regenerates README.md GitHub reflects latest examples.","code":"devtools::build_readme()"},{"path":"https://newjoseph.github.io/survC/reference/calc_risk_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute risk scores from a fitted survival model — calc_risk_score","title":"Compute risk scores from a fitted survival model — calc_risk_score","text":"helper wraps stats::predict() coxph objects package users can easily obtain linear predictors (default) risk scores feed downstream metrics time-dependent ROC Harrell's C-index.","code":""},{"path":"https://newjoseph.github.io/survC/reference/calc_risk_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute risk scores from a fitted survival model — calc_risk_score","text":"","code":"calc_risk_score(model, data = NULL, type = \"lp\", ...)"},{"path":"https://newjoseph.github.io/survC/reference/calc_risk_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute risk scores from a fitted survival model — calc_risk_score","text":"model fitted coxph object. data Optional dataset score model. Defaults training data stored within model. type Scale predictions return. Either \"lp\" (linear predictor, default) \"risk\". NULL omitted, \"lp\" used. ... Additional arguments passed stats::predict().","code":""},{"path":"https://newjoseph.github.io/survC/reference/calc_risk_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute risk scores from a fitted survival model — calc_risk_score","text":"numeric vector containing requested risk scores.","code":""},{"path":"https://newjoseph.github.io/survC/reference/calc_risk_score.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute risk scores from a fitted survival model — calc_risk_score","text":"","code":"if (requireNamespace(\"survival\", quietly = TRUE)) {   fit <- survival::coxph(survival::Surv(time, status) ~ age, data = survival::lung)   # Linear predictor on the training data   calc_risk_score(fit)    # Risk scale predictions on new data   calc_risk_score(fit, survival::lung, type = \"risk\") } #>   [1] 1.2414342 1.1095408 0.8863035 0.9030515 0.9552185 1.2414342 1.1095408 #>   [8] 1.1736362 0.8379001 0.9732688 0.9030515 1.1095408 1.1095408 0.9552185 #>  [15] 0.9030515 1.0889632 1.1518699 1.0103991 0.8863035 0.9030515 1.0889632 #>  [22] 0.7774491 0.7921401 0.9201160 1.1958138 1.1518699 0.9552185 1.1518699 #>  [29] 0.8379001 1.2414342 1.1305073 1.2184105 0.7630305 0.9552185 0.9732688 #>  [36] 0.9916602 1.0489459 1.0687673 1.2414342 1.0294921 1.1518699 1.2184105 #>  [43] 0.9375030 0.9552185 1.1095408 1.2887950 1.2414342 1.0103991 1.2414342 #>  [50] 0.7921401 1.1958138 1.0103991 1.1095408 0.9201160 0.9375030 0.9916602 #>  [57] 1.0489459 0.9030515 0.9201160 1.0294921 1.2648930 0.7630305 1.2184105 #>  [64] 1.0489459 1.1305073 1.1095408 1.0889632 1.0294921 1.1095408 1.0889632 #>  [71] 1.0103991 0.7630305 1.2414342 0.6569031 0.8379001 1.1736362 0.8071088 #>  [78] 0.8863035 1.4152534 1.2184105 0.9375030 0.8698660 0.6819640 0.7079810 #>  [85] 0.7079810 1.1736362 0.9916602 0.9732688 0.7079810 1.1958138 1.0103991 #>  [92] 1.1518699 1.0687673 0.9030515 1.1305073 1.1958138 1.1305073 1.1736362 #>  [99] 1.0294921 1.1518699 0.9201160 1.1305073 0.8863035 1.0103991 0.9375030 #> [106] 1.0687673 0.8537335 1.0889632 0.8698660 1.2648930 1.1305073 0.7079810 #> [113] 1.3890060 1.2648930 0.8537335 1.2887950 0.7774491 1.1095408 1.0687673 #> [120] 1.3890060 1.2648930 0.9552185 1.1305073 1.1958138 1.1518699 1.0687673 #> [127] 0.7921401 1.0294921 1.3131487 0.7630305 0.9375030 0.8379001 0.7488793 #> [134] 0.8698660 1.0889632 1.2414342 0.9201160 0.8863035 0.8537335 0.8863035 #> [141] 1.2184105 1.2414342 1.2887950 1.0489459 0.9030515 0.8379001 1.1736362 #> [148] 0.8537335 1.4419967 0.9375030 1.1518699 0.9552185 0.9916602 0.8379001 #> [155] 0.8698660 1.1305073 1.1095408 0.9916602 1.0103991 0.8863035 0.9916602 #> [162] 0.7079810 1.1305073 1.0103991 1.0294921 0.9030515 0.9552185 0.7349905 #> [169] 0.9732688 1.0489459 0.9732688 0.9201160 0.8863035 0.6948507 0.8379001 #> [176] 0.9375030 0.8863035 0.8698660 0.8379001 1.2414342 0.9552185 0.6447201 #> [183] 1.0687673 1.0489459 0.8071088 0.7213593 1.1958138 0.9201160 1.0294921 #> [190] 0.8379001 1.1958138 0.8223603 0.7921401 1.0294921 1.1736362 1.1518699 #> [197] 1.0103991 1.0294921 0.8223603 0.9552185 1.0294921 1.2184105 1.0103991 #> [204] 0.7921401 1.0103991 0.9916602 0.8698660 0.7921401 1.1305073 0.9375030 #> [211] 0.9552185 1.0889632 1.1305073 1.0294921 1.0489459 1.0489459 0.6693163 #> [218] 1.2887950 1.1518699 0.9030515 1.0889632 1.1736362 1.2887950 1.3131487 #> [225] 0.6447201 1.2648930 1.0687673 0.9201160"},{"path":"https://newjoseph.github.io/survC/reference/cindex_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Harrell's C-index with 95% CI — cindex_calc","title":"Calculate Harrell's C-index with 95% CI — cindex_calc","text":"Calculate Harrell's C-index 95% CI","code":""},{"path":"https://newjoseph.github.io/survC/reference/cindex_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Harrell's C-index with 95% CI — cindex_calc","text":"","code":"cindex_calc(model, newdata = NULL, digits = 3)"},{"path":"https://newjoseph.github.io/survC/reference/cindex_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Harrell's C-index with 95% CI — cindex_calc","text":"model 'coxph' object newdata optional validation dataset digits number decimal places rounding (default 3).","code":""},{"path":"https://newjoseph.github.io/survC/reference/cindex_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Harrell's C-index with 95% CI — cindex_calc","text":"numeric vector C-index (lower, upper)","code":""},{"path":"https://newjoseph.github.io/survC/reference/cindex_calc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Harrell's C-index with 95% CI — cindex_calc","text":"","code":"library(survival) fit <- coxph(Surv(time, status) ~ age + sex, data = lung) cindex_calc(fit) #> Cindex  Lower  Upper  #>  0.603  0.553  0.653"},{"path":"https://newjoseph.github.io/survC/reference/prepare_adpkd_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare ADPKD cohort data for survival modelling — prepare_adpkd_dataset","title":"Prepare ADPKD cohort data for survival modelling — prepare_adpkd_dataset","text":"helper reproduces preprocessing pipeline previously temp.R. reads baseline follow-Excel files, performs column harmonisation, derives follow-times laboratory summaries, returns cleaned dataset split training validation subsets.","code":""},{"path":"https://newjoseph.github.io/survC/reference/prepare_adpkd_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare ADPKD cohort data for survival modelling — prepare_adpkd_dataset","text":"","code":"prepare_adpkd_dataset(   baseline_path,   followup_path,   followup_reference = as.Date(\"2025-08-01\"),   train_size = 300,   seed = 123456L )"},{"path":"https://newjoseph.github.io/survC/reference/prepare_adpkd_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare ADPKD cohort data for survival modelling — prepare_adpkd_dataset","text":"baseline_path Path baseline Excel file (sheet 1, skip = 1). followup_path Path follow-Excel file (sheet 1). followup_reference Date used RRT start date missing. Either Date something coercible via .Date(). Defaults \"2025-08-01\". train_size Number subjects sample training set. exceeds number rows falls back nrow(data). seed Integer seed train/validation split (default 123456).","code":""},{"path":"https://newjoseph.github.io/survC/reference/prepare_adpkd_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare ADPKD cohort data for survival modelling — prepare_adpkd_dataset","text":"list elements data (cleaned dataset), train, validation, varlist, labels (jstable available). datasets returned data.table objects.","code":""},{"path":"https://newjoseph.github.io/survC/reference/tdroc_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate time-dependent ROC and AUC — tdroc_calc","title":"Calculate time-dependent ROC and AUC — tdroc_calc","text":"Calculate time-dependent ROC AUC","code":""},{"path":"https://newjoseph.github.io/survC/reference/tdroc_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate time-dependent ROC and AUC — tdroc_calc","text":"","code":"tdroc_calc(time, status, marker, times)"},{"path":"https://newjoseph.github.io/survC/reference/tdroc_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate time-dependent ROC and AUC — tdroc_calc","text":"time Survival time vector status Event indicator (1 = event, 0 = censor) marker Risk score linear predictor times Vector time points (e.g., c(365, 730, 1095))","code":""},{"path":"https://newjoseph.github.io/survC/reference/tdroc_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate time-dependent ROC and AUC — tdroc_calc","text":"data.frame AUCs time","code":""},{"path":"https://newjoseph.github.io/survC/reference/validation_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate survival model validation report — validation_report","title":"Generate survival model validation report — validation_report","text":"Generate survival model validation report","code":""},{"path":"https://newjoseph.github.io/survC/reference/validation_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate survival model validation report — validation_report","text":"","code":"validation_report(   train_data,   val_data,   model,   time_col,   status_col,   times = c(365, 730, 1095),   time_unit = \"days\",   output = \"validation_report.pptx\" )"},{"path":"https://newjoseph.github.io/survC/reference/validation_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate survival model validation report — validation_report","text":"train_data training dataset containing survival outcomes. val_data validation dataset containing survival outcomes. model fitted 'coxph' time_col name survival time column present datasets status_col name event indicator column present datasets times follow-timepoints time_unit character label time axis (default = \"days\") output file path (.pptx .html)","code":""},{"path":"https://newjoseph.github.io/survC/reference/validation_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate survival model validation report — validation_report","text":"Writes validation report","code":""}]
